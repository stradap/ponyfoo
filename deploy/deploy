#!/bin/bash

set -e

: "${NODE_ENV:="staging"}"
: "${RAW_AMI:="ami-6644fc71"}"
: "${PRIMAL_AMI:="ami-42e67855"}"
# : "${CARNIVORE_AMI:="ami-xxxxxxxx"}"
# : "${DEPLOYMENT:="no"}"
: "${CLEANUP:="no"}"
# : "${REBUILD_APP:="no"}"

# configurable variables
NAME="ponyfoo-$NODE_ENV"

# conventions, do not change
INSTANCE_TYPE="t2.small"
INSTANCE_USER="admin"
MIN_CAPACITY="1"
MAX_CAPACITY="3"
DESIRED_CAPACITY="1"

STAMP="$(date +"%Y%m%d%H%M%S")"
SG_NAME="standard-$NAME"
ELB_NAME="elb-$NAME"
ASG_NAME="asg-$NAME-$STAMP"
LC_NAME="lc-$NAME-$STAMP"

rm -rf deploy/log
mkdir deploy/log

if [ -z ${REBUILD_APP+x} ]
then
  npm run build-env
else
  echo "deploy: skipping app build for $NODE_ENV environment."
fi

echo "deploy: getting vpc and subnet ids..."
aws ec2 describe-subnets --filters Name=tag:Name,Values=subnet-$NAME > deploy/log/subnet.log
VPC_ID=$(jq -r '.Subnets[0].VpcId' < deploy/log/subnet.log)
SUBNET_ID=$(jq -r '.Subnets[0].SubnetId' < deploy/log/subnet.log)

# build images using packer
if [ -z ${RAW_AMI+x} ]
then
  echo "deploy: building raw image with packer..."

  cp package.json deploy/mailtube
  packer build \
    -var VPC_ID="$VPC_ID" \
    -var SUBNET_ID="$SUBNET_ID" \
    deploy/templates/raw.json | tee deploy/log/packer-raw.log

  RAW_AMI=$(tail -1 < deploy/log/packer-raw.log | cut -d ' ' -f 2)

  echo "deploy: built image $RAW_AMI"
else
  echo "deploy: skipping raw image build, using $RAW_AMI"
fi

ES_USERNAME=$(node lib/env ELASTICSEARCH_USERNAME | jq -r .)
ES_PASSWORD=$(node lib/env ELASTICSEARCH_PASSWORD | jq -r .)

if [ -z ${PRIMAL_AMI+x} ]
then
  echo "deploy: building primal image with packer..."

  NODE_VERSION=$(cat .node-version)
  ES_LICENSE=$(node lib/env ELASTICSEARCH_LICENSE | jq -r .)

  mkdir -p deploy/mailtube/elasticsearch
  echo $ES_LICENSE > deploy/mailtube/elasticsearch/license.json
  cp package.json deploy/mailtube

  packer build \
    -var VPC_ID="$VPC_ID" \
    -var SUBNET_ID="$SUBNET_ID" \
    -var SOURCE_AMI="$RAW_AMI" \
    -var NODE_VERSION="$NODE_VERSION" \
    -var ES_USERNAME="$ES_USERNAME" \
    -var ES_PASSWORD="$ES_PASSWORD" \
    deploy/templates/primal.json | tee deploy/log/packer-primal.log

  PRIMAL_AMI=$(tail -1 < deploy/log/packer-primal.log | cut -d ' ' -f 2)
  echo "deploy: built image $PRIMAL_AMI"
else
  echo "deploy: skipping primal image build, using $PRIMAL_AMI"
fi

if [ -z ${CARNIVORE_AMI+x} ]
then
  GIT_ARTICLES_REPO=$(node lib/env GIT_ARTICLES_REPO | jq -r .)
  GIT_ARTICLES_USERNAME=$(node lib/env GIT_ARTICLES_USERNAME | jq -r .)
  GIT_ARTICLES_PASSWORD=$(node lib/env GIT_ARTICLES_PASSWORD | jq -r .)
  GIT_ARTICLES_EMAIL=$(node lib/env GIT_ARTICLES_EMAIL | jq -r .)
  GIT_ARTICLES_NAME=$(node lib/env GIT_ARTICLES_NAME | jq -r .)

  echo "deploy: building carnivore image with packer..."
  packer build \
    -var VPC_ID="$VPC_ID" \
    -var SUBNET_ID="$SUBNET_ID" \
    -var SOURCE_AMI="$PRIMAL_AMI" \
    -var NODE_ENV="$NODE_ENV" \
    -var ES_USERNAME="$ES_USERNAME" \
    -var ES_PASSWORD="$ES_PASSWORD" \
    -var GIT_ARTICLES_REPO="$GIT_ARTICLES_REPO" \
    -var GIT_ARTICLES_USERNAME="$GIT_ARTICLES_USERNAME" \
    -var GIT_ARTICLES_PASSWORD="$GIT_ARTICLES_PASSWORD" \
    -var GIT_ARTICLES_EMAIL="$GIT_ARTICLES_EMAIL" \
    -var GIT_ARTICLES_NAME="$GIT_ARTICLES_NAME" \
    deploy/templates/carnivore.json | tee deploy/log/packer-carnivore.log

  CARNIVORE_AMI=$(tail -1 < deploy/log/packer-carnivore.log | cut -d ' ' -f 2)

  echo "deploy: built image $CARNIVORE_AMI"
else
  CLEANUP="no"
  echo "deploy: skipping deployment image build, using $CARNIVORE_AMI"
fi

if [ "$DEPLOYMENT" == "no" ]
then
  echo "deploy: not deploying."
  exit
fi

echo "deploy: deploying $CARNIVORE_AMI ($NODE_ENV) to aws."
echo "deploy: pulling down list of existing autoscaling groups..."
aws autoscaling describe-auto-scaling-groups > deploy/log/asg-list.log

echo "deploy: pulling down list of existing launch configurations..."
aws autoscaling describe-launch-configurations > deploy/log/asg-lc.log

EXISTING_GROUP_NAMES=$(underscore process "data.AutoScalingGroups
.filter(function (asg) {
  return asg.AutoScalingGroupName.indexOf(\"asg-$NAME\") === 0
})
.map(function (asg) {
  return asg.AutoScalingGroupName
})
.join('\n')" < deploy/log/asg-list.log | jq . -r)

EXISTING_LAUNCH_CONFIGURATIONS=$(underscore process "data.LaunchConfigurations
.filter(function (lc) {
  return lc.LaunchConfigurationName.indexOf(\"lc-$NAME\") === 0
})
.map(function (lc) {
  return lc.LaunchConfigurationName
})
.join('\n')" < deploy/log/asg-lc.log | jq . -r)

if [ "$EXISTING_GROUP_NAMES" != "" ]
then
  echo "$EXISTING_GROUP_NAMES" > deploy/log/asg-existing-group-names.log
else
  touch deploy/log/asg-existing-group-names.log
fi

if [ "$EXISTING_LAUNCH_CONFIGURATIONS" != "" ]
then
  echo "$EXISTING_LAUNCH_CONFIGURATIONS" > deploy/log/asg-existing-lc.log
else
  touch deploy/log/asg-existing-lc.log
fi

echo "deploy: querying security group about their id..."
SG_ID=$(aws ec2 describe-security-groups --filters Name=tag:Name,Values=$SG_NAME | jq -r '.SecurityGroups[0].GroupId')

echo "deploy: creating $LC_NAME using the latest image..."
aws autoscaling create-launch-configuration \
  --launch-configuration-name "$LC_NAME" \
  --image-id "$CARNIVORE_AMI" \
  --instance-type "$INSTANCE_TYPE" \
  --key-name "$NAME" \
  --associate-public-ip-address \
  --security-groups "$SG_ID" > deploy/log/asg-lc-creation.log

echo "deploy: creating $ASG_NAME autoscaling group..."
aws autoscaling create-auto-scaling-group \
  --auto-scaling-group-name "$ASG_NAME" \
  --launch-configuration-name "$LC_NAME" \
  --health-check-type "ELB" \
  --health-check-grace-period 300 \
  --load-balancer-names "$ELB_NAME" \
  --min-size "$MIN_CAPACITY" \
  --max-size "$MAX_CAPACITY" \
  --desired-capacity "$DESIRED_CAPACITY" \
  --vpc-zone-identifier $SUBNET_ID \
  --tags ResourceId=$ASG_NAME,Key=Name,Value=$NAME ResourceId=$ASG_NAME,Key=Role,Value=web > deploy/log/asg-create-group.log

test_ec2_elb_health() {
  EC2_HEALTH="0"
  while [ "$EC2_HEALTH" != "$DESIRED_CAPACITY" ]
  do
    printf "deploy: ensuring new instance(s) are healthy at ec2"
    sleep 2;printf ".";sleep 2;printf "."
    aws autoscaling describe-auto-scaling-groups \
      --auto-scaling-group-names "$ASG_NAME" > deploy/log/asg-description.log

    EC2_HEALTH=$(underscore process "data.AutoScalingGroups[0].Instances
    .filter(function (i) {
      return i.LifecycleState === 'InService' && i.HealthStatus === 'Healthy'
    })
    .length" < deploy/log/asg-description.log | jq . -r)

    echo " ($EC2_HEALTH/$DESIRED_CAPACITY are healthy)"
  done

  ELB_INSTANCES=$(jq -r '.AutoScalingGroups[0].Instances[]?.InstanceId' < deploy/log/asg-description.log)
  ELB_HEALTH="0"
  while [ "$ELB_HEALTH" != "$DESIRED_CAPACITY" ]
  do
    printf "deploy: ensuring new instance(s) are healthy at elb"
    sleep 2;printf ".";sleep 2;printf "."
    aws elb describe-instance-health \
      --load-balancer-name "$ELB_NAME" \
      --instances $ELB_INSTANCES  > deploy/log/elb-health-description.log

    ELB_HEALTH=$(underscore process "data.InstanceStates
    .filter(function (s) {
      return s.State === 'InService'
    })
    .length" < deploy/log/elb-health-description.log | jq . -r)

    echo " ($ELB_HEALTH/$DESIRED_CAPACITY are healthy)"
  done
}

echo "deploy: testing deployment health."
test_ec2_elb_health
echo "deploy: waiting for 60s to ensure new deployment is in good standing."
sleep 60
echo "deploy: testing deployment health, again."
test_ec2_elb_health

while read EXISTING_GROUP_NAME
do
  ASG_INSTANCES=$(underscore process "data.AutoScalingGroups
  .filter(function (asg, i) {
    return asg.AutoScalingGroupName === \"$EXISTING_GROUP_NAME\"
  })
  .shift()
  .Instances.map(function (i) {
    return i.InstanceId
  })
  .join('\n')" < deploy/log/asg-list.log | jq . -r)

  echo "deploy: removing instances in outdated $EXISTING_GROUP_NAME from $ELB_NAME..."
  aws elb deregister-instances-from-load-balancer \
    --load-balancer-name $ELB_NAME \
    --instances $ASG_INSTANCES > deploy/log/elb-deregister.log

  echo "deploy: downscaling outdated $EXISTING_GROUP_NAME..."
  aws autoscaling update-auto-scaling-group \
    --auto-scaling-group-name $EXISTING_GROUP_NAME \
    --max-size 0 \
    --min-size 0 > deploy/log/asg-downscale.log

  OPERATIONAL="1"
  while [ "$OPERATIONAL" != "0" ]
  do
    printf "deploy: ensuring outdated instance(s) are terminated"
    sleep 2;printf ".";sleep 2;printf "."
    aws autoscaling describe-auto-scaling-groups \
      --auto-scaling-group-names "$EXISTING_GROUP_NAME" > deploy/log/asg-existing-description.log

    OPERATIONAL=$(underscore process "data.AutoScalingGroups
    .filter(function (asg) {
      return asg.AutoScalingGroupName === \"$EXISTING_GROUP_NAME\"
    })
    .shift()
    .Instances.length" < deploy/log/asg-existing-description.log | jq . -r)

    echo " ($OPERATIONAL are operational)"
  done

  echo "deploy: deleting outdated $EXISTING_GROUP_NAME..."
  sleep 10;
  aws autoscaling delete-auto-scaling-group \
    --auto-scaling-group-name $EXISTING_GROUP_NAME || echo "deploy: delete failed. maybe it's already deleted."
done < deploy/log/asg-existing-group-names.log

while read EXISTING_LC_NAME
do
  echo "deploy: removing outdated launch configuration $EXISTING_LC_NAME..."
  aws autoscaling delete-launch-configuration \
    --launch-configuration-name "$EXISTING_LC_NAME" >> deploy/log/asg-lc-deletion.log || echo "deploy: delete failed. maybe it's already deleted."
done < deploy/log/asg-existing-lc.log

if [ "$CLEANUP" != "no" ]
then
  SNAPSHOT_ID=$(aws ec2 describe-images \
    --image-ids $CARNIVORE_AMI \
    | jq -r '.Images[0].BlockDeviceMappings[0].Ebs.SnapshotId')

  echo "deploy: deregistering deployment image $CARNIVORE_AMI"
  aws ec2 deregister-image --image-id "$CARNIVORE_AMI"

  echo "deploy: deleting snapshot $SNAPSHOT_ID"
  aws ec2 delete-snapshot --snapshot-id "$SNAPSHOT_ID"
fi

echo "deploy: done!"
